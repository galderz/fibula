❯ java -jar target/benchmarks.jar JMHSample_09 -f 2 -i 2 -wi 2 -r 2 -w 2
# JMH version: 1.37
# VM version: JDK 21.0.1-internal, OpenJDK 64-Bit Server VM, 21.0.1-internal-adhoc.galder.jdk21u
# VM invoker: /Users/galder/opt/jdk21u/build/release/images/jdk/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 2 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_09_Blackholes.baseline

# Run progress: 0.00% complete, ETA 00:01:04
# Fork: 1 of 2
# Warmup Iteration   1: 5.752 ns/op
# Warmup Iteration   2: 5.751 ns/op
Iteration   1: 5.739 ns/op
Iteration   2: 5.734 ns/op

# Run progress: 12.50% complete, ETA 00:00:57
# Fork: 2 of 2
# Warmup Iteration   1: 5.769 ns/op
# Warmup Iteration   2: 5.740 ns/op
Iteration   1: 5.736 ns/op
Iteration   2: 5.736 ns/op


Result "org.openjdk.jmh.samples.JMHSample_09_Blackholes.baseline":
  5.736 ±(99.9%) 0.012 ns/op [Average]
  (min, avg, max) = (5.734, 5.736, 5.739), stdev = 0.002
  CI (99.9%): [5.724, 5.748] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1-internal, OpenJDK 64-Bit Server VM, 21.0.1-internal-adhoc.galder.jdk21u
# VM invoker: /Users/galder/opt/jdk21u/build/release/images/jdk/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 2 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_09_Blackholes.measureRight_1

# Run progress: 25.00% complete, ETA 00:00:49
# Fork: 1 of 2
# Warmup Iteration   1: 10.441 ns/op
# Warmup Iteration   2: 10.427 ns/op
Iteration   1: 10.425 ns/op
Iteration   2: 10.423 ns/op

# Run progress: 37.50% complete, ETA 00:00:41
# Fork: 2 of 2
# Warmup Iteration   1: 10.444 ns/op
# Warmup Iteration   2: 10.427 ns/op
Iteration   1: 10.422 ns/op
Iteration   2: 10.446 ns/op


Result "org.openjdk.jmh.samples.JMHSample_09_Blackholes.measureRight_1":
  10.429 ±(99.9%) 0.074 ns/op [Average]
  (min, avg, max) = (10.422, 10.429, 10.446), stdev = 0.012
  CI (99.9%): [10.355, 10.503] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1-internal, OpenJDK 64-Bit Server VM, 21.0.1-internal-adhoc.galder.jdk21u
# VM invoker: /Users/galder/opt/jdk21u/build/release/images/jdk/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 2 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_09_Blackholes.measureRight_2

# Run progress: 50.00% complete, ETA 00:00:32
# Fork: 1 of 2
# Warmup Iteration   1: 10.517 ns/op
# Warmup Iteration   2: 10.442 ns/op
Iteration   1: 10.465 ns/op
Iteration   2: 10.463 ns/op

# Run progress: 62.50% complete, ETA 00:00:24
# Fork: 2 of 2
# Warmup Iteration   1: 10.441 ns/op
# Warmup Iteration   2: 10.431 ns/op
Iteration   1: 10.425 ns/op
Iteration   2: 10.534 ns/op


Result "org.openjdk.jmh.samples.JMHSample_09_Blackholes.measureRight_2":
  10.472 ±(99.9%) 0.293 ns/op [Average]
  (min, avg, max) = (10.425, 10.472, 10.534), stdev = 0.045
  CI (99.9%): [10.179, 10.765] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 21.0.1-internal, OpenJDK 64-Bit Server VM, 21.0.1-internal-adhoc.galder.jdk21u
# VM invoker: /Users/galder/opt/jdk21u/build/release/images/jdk/bin/java
# VM options: <none>
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 2 iterations, 2 s each
# Measurement: 2 iterations, 2 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.openjdk.jmh.samples.JMHSample_09_Blackholes.measureWrong

# Run progress: 75.00% complete, ETA 00:00:16
# Fork: 1 of 2
# Warmup Iteration   1: 5.791 ns/op
# Warmup Iteration   2: 5.835 ns/op
Iteration   1: 5.779 ns/op
Iteration   2: 5.775 ns/op

# Run progress: 87.50% complete, ETA 00:00:08
# Fork: 2 of 2
# Warmup Iteration   1: 5.792 ns/op
# Warmup Iteration   2: 5.754 ns/op
Iteration   1: 5.791 ns/op
Iteration   2: 5.771 ns/op


Result "org.openjdk.jmh.samples.JMHSample_09_Blackholes.measureWrong":
  5.779 ±(99.9%) 0.054 ns/op [Average]
  (min, avg, max) = (5.771, 5.779, 5.791), stdev = 0.008
  CI (99.9%): [5.725, 5.833] (assumes normal distribution)


# Run complete. Total time: 00:01:05

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                               Mode  Cnt   Score   Error  Units
JMHSample_09_Blackholes.baseline        avgt    4   5.736 ± 0.012  ns/op
JMHSample_09_Blackholes.measureRight_1  avgt    4  10.429 ± 0.074  ns/op
JMHSample_09_Blackholes.measureRight_2  avgt    4  10.472 ± 0.293  ns/op
JMHSample_09_Blackholes.measureWrong    avgt    4   5.779 ± 0.054  ns/op
